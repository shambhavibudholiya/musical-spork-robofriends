{"version":3,"sources":["serviceWorker.js","components/Card.js","components/Cardlist.js","components/Searchbox.js","components/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","Cardlist","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","Response","json","users","filterRobots","this","filter","toLowerCase","includes","length","Searchbox","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCPSC,EAVF,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GACtB,OACI,yBAAKC,UAAU,uDACpB,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAA1B,cADf,eACoE,6BAC5D,4BAAKF,GACL,2BAAIC,MCYLK,EAhBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACD,6BACIA,EAAOC,KAAI,SAACC,EAAKC,GACjB,OACA,kBAAC,EAAD,CAAMC,IAAOD,EACbR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCKTW,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,yBAAKX,UAAU,OACb,2BACEA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCDHI,G,MAPA,SAACC,GACZ,OACI,yBAAKC,MAAS,CAACC,UAAW,SAAUC,OAAQ,kBAAkBC,OAAQ,WACjEJ,EAAMK,YC0CJC,E,kDArCX,aAAe,IAAD,8BACZ,gBAaFC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACf,YAAac,EAAME,OAAOC,SAb3C,EAAKC,MAAQ,CACXxB,OAAQ,GACRM,YAAa,IAJH,E,gEAOM,IAAD,OACfmB,MAAM,8CACNC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEhBF,MAAK,SAAAG,GAAK,OAAG,EAAKR,SAAS,CAACrB,OAAQ6B,S,+BAKhC,IAAD,OACEC,EAAeC,KAAKP,MAAMxB,OAAOgC,QAAO,SAAAhC,GAC1C,OAAOA,EAAOP,KAAKwC,cAAcC,SAAS,EAAKV,MAAMlB,YAAY2B,kBAExE,OAAgC,IAA5BF,KAAKP,MAAMxB,OAAOmC,OACX,uCAIJ,yBAAKvC,UAAU,MACf,wBAAIA,UAAU,MAAd,eACA,kBAACwC,EAAD,CAAW7B,aAAcwB,KAAKZ,iBAClC,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUnB,OAAQ8B,U,GA/BRO,IAAMC,WCFxBC,IAASC,OACP,kBAAC,EAAD,MACDC,SAASC,eAAe,SN2HnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ed283da4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nconst Card = ({name,email,id}) =>{\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n   <img alt='robot' src={`https://robohash.org/${id}?150*150`}/>            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\nexport default Card;","import React from 'react';\nimport Card from './Card';\nconst Cardlist = ({ robots }) => {\n    return(\n   <div>{\n       robots.map((user,i) => {\n       return (\n       <Card key = {i} \n       id={robots[i].id} \n       name={robots[i].name} \n       email={robots[i].email} \n       />\n       );\n       })\n    }\n       </div>\n);\n}\nexport default Cardlist;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import React from 'react';\nconst Scroll = (props) => {\n    return(\n        <div style = {{overflowY: 'scroll', border: '1px solid Black',height: '1000px' }}>\n            {props.children}\n        </div>\n    )\n};\nexport default Scroll;","import React from 'react';\nimport Cardlist from '../components/Cardlist';\nimport Searchbox from '../components/Searchbox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\n//props never change\n//state is the description of th program, it is an object. It is able to change.\n  \nclass App extends React.Component {\n    constructor() {\n      super()\n      this.state = {\n        robots: [],\n        searchfield: ''\n      }  \n    }\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users').\n        then(Response => {\n         return Response.json();\n        })\n        .then(users =>this.setState({robots: users}));\n    }\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value})\n    }   \n    render(){\n        const filterRobots = this.state.robots.filter(robots =>{\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n        })\n     if (this.state.robots.length ===0){\n         return <h1>Loading</h1>\n     }\n     else{\n    return(\n            <div className='tc'>\n            <h1 className='f1'>RoboFriends</h1>\n            <Searchbox searchChange={this.onSearchChange} />\n        <Scroll>\n        <Cardlist robots={filterRobots}/>\n        </Scroll>\n        </div>\n        );\n    }\n    }\n}\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\nReactDOM.render(\n  <App />\n,document.getElementById('root')\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}